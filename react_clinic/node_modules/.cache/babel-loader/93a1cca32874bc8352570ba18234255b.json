{"ast":null,"code":"import axios from 'axios';\nconst INSTRUCTOR = 'in28minutes';\nconst PASSWORD = 'dummy';\nconst COURSE_API_URL = 'http://localhost:8080';\nconst DOCTORS_REST_API_URL = `${COURSE_API_URL}/api/${INSTRUCTOR}`;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    // return axios.get(`http://localhost:8080/api/auth/signin`,\n    //     { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    return axios.post('http://localhost:8080/api/auth/signin', {\n      'username': username,\n      'password': password\n    }); // .then(response =>{\n    //     getResponse=response;\n    // })\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService(); // import axios from 'axios'\n// const API_URL = 'http://localhost:8080'\n// export const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n// class AuthenticationService {\n//     executeBasicAuthenticationService(username, password) {\n//         return axios.get(`${API_URL}/basicauth`,\n//             { headers: { authorization: this.createBasicAuthToken(username, password) } })\n//     }\n//     executeJwtAuthenticationService(username, password) {\n//         console.log(username);\n//         return axios.post(`${API_URL}/authenticate`, {\n//             username,\n//             password\n//         })\n//     }\n//     createBasicAuthToken(username, password) {\n//         return 'Basic ' + window.btoa(username + \":\" + password)\n//     }\n//     registerSuccessfulLogin(username, password) {\n//         //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n//         //console.log('registerSuccessfulLogin')\n//         sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n//         this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n//     }\n//     registerSuccessfulLoginForJwt(username, token) {\n//         sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n//         this.setupAxiosInterceptors(this.createJWTToken(token))\n//     }\n//     createJWTToken(token) {\n//         return 'Bearer ' + token\n//     }\n//     logout() {\n//         sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n//     }\n//     isUserLoggedIn() {\n//         let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n//         if (user === null) return false\n//         return true\n//     }\n//     getLoggedInUserName() {\n//         let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n//         if (user === null) return ''\n//         return user\n//     }\n//     setupAxiosInterceptors(token) {\n//         axios.interceptors.request.use(\n//             (config) => {\n//                 if (this.isUserLoggedIn()) {\n//                     config.headers.authorization = token\n//                 }\n//                 return config\n//             }\n//         )\n//     }\n// }\n// export default new AuthenticationService()","map":{"version":3,"sources":["/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/services/AuthenticationService.js"],"names":["axios","INSTRUCTOR","PASSWORD","COURSE_API_URL","DOCTORS_REST_API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","post","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","token","interceptors","request","use","config","isUserLoggedIn","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAG,aAAnB;AACA,MAAMC,QAAQ,GAAG,OAAjB;AACA,MAAMC,cAAc,GAAG,uBAAvB;AACA,MAAMC,oBAAoB,GAAI,GAAED,cAAe,QAAOF,UAAW,EAAjE;AACA,OAAO,MAAMI,gCAAgC,GAAG,mBAAzC;;AAGP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD;AACA;AACA,WAAOT,KAAK,CAACU,IAAN,CAAW,uCAAX,EAAoD;AAAC,kBAAWF,QAAZ;AAAqB,kBAAWC;AAAhC,KAApD,CAAP,CAHkD,CAIlD;AACA;AACA;AACH;;AAEDE,EAAAA,oBAAoB,CAACH,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWG,MAAM,CAACC,IAAP,CAAYL,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AACDK,EAAAA,uBAAuB,CAACN,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACA;AACAM,IAAAA,cAAc,CAACC,OAAf,CAAuBX,gCAAvB,EAAyDG,QAAzD;AACA,SAAKS,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BH,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDQ,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC1BlB,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKC,cAAT,EAAyB;AACrBD,QAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+BP,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AA9BuB;;AAgC5B,eAAe,IAAIhB,qBAAJ,EAAf,C,CACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from 'axios'\n\nconst INSTRUCTOR = 'in28minutes'\nconst PASSWORD = 'dummy'\nconst COURSE_API_URL = 'http://localhost:8080'\nconst DOCTORS_REST_API_URL = `${COURSE_API_URL}/api/${INSTRUCTOR}`\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        // return axios.get(`http://localhost:8080/api/auth/signin`,\n        //     { headers: { authorization: this.createBasicAuthToken(username, password) } })\n        return axios.post('http://localhost:8080/api/auth/signin', {'username':username,'password':password})\n        // .then(response =>{\n        //     getResponse=response;\n        // })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\nexport default new AuthenticationService()\n// import axios from 'axios'\n\n// const API_URL = 'http://localhost:8080'\n\n// export const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n// class AuthenticationService {\n\n//     executeBasicAuthenticationService(username, password) {\n//         return axios.get(`${API_URL}/basicauth`,\n//             { headers: { authorization: this.createBasicAuthToken(username, password) } })\n//     }\n\n//     executeJwtAuthenticationService(username, password) {\n//         console.log(username);\n//         return axios.post(`${API_URL}/authenticate`, {\n//             username,\n//             password\n//         })\n//     }\n\n//     createBasicAuthToken(username, password) {\n//         return 'Basic ' + window.btoa(username + \":\" + password)\n//     }\n\n//     registerSuccessfulLogin(username, password) {\n//         //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n//         //console.log('registerSuccessfulLogin')\n//         sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n//         this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n//     }\n\n//     registerSuccessfulLoginForJwt(username, token) {\n//         sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n//         this.setupAxiosInterceptors(this.createJWTToken(token))\n//     }\n\n//     createJWTToken(token) {\n//         return 'Bearer ' + token\n//     }\n\n\n//     logout() {\n//         sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n//     }\n\n//     isUserLoggedIn() {\n//         let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n//         if (user === null) return false\n//         return true\n//     }\n\n//     getLoggedInUserName() {\n//         let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n//         if (user === null) return ''\n//         return user\n//     }\n\n//     setupAxiosInterceptors(token) {\n//         axios.interceptors.request.use(\n//             (config) => {\n//                 if (this.isUserLoggedIn()) {\n//                     config.headers.authorization = token\n//                 }\n//                 return config\n//             }\n//         )\n//     }\n// }\n\n// export default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}