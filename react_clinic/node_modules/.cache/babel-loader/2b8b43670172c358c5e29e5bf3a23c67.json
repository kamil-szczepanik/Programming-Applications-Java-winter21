{"ast":null,"code":"var _jsxFileName = \"/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment.js\";\nimport React, { useState } from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddAppointment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePressedButton = event => {\n      event.preventDefault();\n      var date_String = \"\";\n      date_String += this.state.appDate + \"T\" + this.state.appTime + ':00'; //dodać inne tworzenie z ID wizyty\n\n      axios.post('http://localhost:8080/api/addPatientToAppointment', {\n        \"date\": date_String,\n        \"patient_id\": this.state.appPacID,\n        \"doctor_id\": this.state.appDocID\n      }).then(response => {\n        console.log(response);\n        alert(\"Pomyślnie dodano wizytę!\");\n      }).catch(error => {\n        alert(\"Nie udało się dodać wizyty!\");\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      doctors: [],\n      appointments: [],\n      appDate: null,\n      appDocID: null,\n      appPacID: 21\n    };\n  }\n\n  componentDidMount() {\n    DoctorService.getDoctors().then(response => {\n      this.setState({\n        doctors: response.data\n      });\n    });\n    AppointmentService.getAppointments().then(response => {\n      this.setState({\n        appointments: response.data\n      });\n    });\n  }\n\n  dateToString(given_date, delay = 0) {\n    var date = new Date();\n    date.setDate(given_date.getDate() + delay);\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var yyyy = date.getFullYear();\n    return yyyy + '-' + mm + '-' + dd;\n  }\n\n  dateHandleChange(event) {\n    event.preventDefault();\n    this.setState({\n      appDate: event.target.value\n    });\n    console.log(this.state.appDate);\n  }\n\n  timeHandleChange(event) {\n    event.preventDefault();\n    this.setState({\n      appTime: event.target.value\n    });\n    console.log(this.state.appTime);\n  }\n\n  onChangeValue(event) {\n    this.setState({\n      appDocID: event.target.value\n    });\n  }\n\n  render() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\n    var yyyy = today.getFullYear();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [window.response === undefined ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 46\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"post\",\n        id: \"appointment_form\",\n        onSubmit: this.handlePressedButton,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"doctorsInAppointmentCreating\",\n          onChange: this.onChangeValue.bind(this),\n          children: this.state.doctors.map(doctor => {\n            return (\n              /*#__PURE__*/\n              // <div className=\"doctorsInAppointmentCreating\">\n              //     <input type=\"radio\" id={doctor.id}\n              //     name={doctor.firstName + doctor.lastName} value={doctor.firstName + doctor.lastName}/>\n              //     <label htmlFor={doctor.firstName + doctor.lastName}>{doctor.firstName + doctor.lastName}</label>\n              // </div>\n              _jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  id: doctor.id,\n                  name: \"doctors\",\n                  value: doctor.id,\n                  on: e => this.doctorIdHandleChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: doctor.firstName + doctor.lastName,\n                  children: doctor.firstName + doctor.lastName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: this.state.appDate,\n          name: \"appointments\",\n          id: \"appointments\",\n          onChange: e => this.setState({\n            appTime: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"appointments\",\n            children: \"Wybierz termin:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n            label: \"appointment:\",\n            children: this.state.appointments.map(appointment => {\n              if (this.state.appDocID === appointment.doctor_id && appointment.patient_id === \"\") return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: appointment.date,\n                  children: appointment.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.appTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Dodaj wizyt\\u0119\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default AddAppointment;","map":{"version":3,"sources":["/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment.js"],"names":["React","useState","props","DoctorService","AppointmentService","axios","AddAppointment","Component","constructor","handlePressedButton","event","preventDefault","date_String","state","appDate","appTime","post","appPacID","appDocID","then","response","console","log","alert","catch","error","doctors","appointments","componentDidMount","getDoctors","setState","data","getAppointments","dateToString","given_date","delay","date","Date","setDate","getDate","dd","String","padStart","mm","getMonth","yyyy","getFullYear","dateHandleChange","target","value","timeHandleChange","onChangeValue","render","today","window","undefined","bind","map","doctor","id","e","doctorIdHandleChange","firstName","lastName","appointment","doctor_id","patient_id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\nimport axios from 'axios';\n\n\nclass AddAppointment extends React.Component{\n    \n    \n\n    constructor(props){\n        super(props)\n        this.state = {\n            doctors:[],\n            appointments:[],\n            appDate:null,\n            appDocID:null,\n            appPacID:21,\n\n            \n        }\n    }\n    \n\n    componentDidMount(){\n        DoctorService.getDoctors().then((response)=>{\n            this.setState({doctors: response.data})\n        });\n        AppointmentService.getAppointments().then((response)=>{\n            this.setState({appointments: response.data})\n        });\n    }\n    dateToString(given_date, delay=0){\n        var date = new Date();\n        date.setDate(given_date.getDate()+delay);\n        var dd = String(date.getDate()).padStart(2, '0');\n        var mm = String(date.getMonth() + 1).padStart(2, '0');\n        var yyyy = date.getFullYear();\n\n        return yyyy + '-' + mm + '-' + dd;\n\n    }\n    handlePressedButton = (event) =>{\n        event.preventDefault()\n        var date_String = \"\"\n        date_String+=this.state.appDate + \"T\" + this.state.appTime + ':00'\n        //dodać inne tworzenie z ID wizyty\n        axios.post('http://localhost:8080/api/addPatientToAppointment', {\"date\":date_String, \"patient_id\":this.state.appPacID, \"doctor_id\":this.state.appDocID})\n        .then(response =>{\n            console.log(response)\n            alert(\"Pomyślnie dodano wizytę!\")\n        })\n        .catch(error=>{\n            alert(\"Nie udało się dodać wizyty!\")\n            console.log(error)\n        })\n    }\n\n    dateHandleChange(event){\n        event.preventDefault();\n\n        this.setState({appDate:event.target.value})\n        console.log(this.state.appDate);\n\n    }\n   timeHandleChange(event){\n        event.preventDefault();\n        this.setState({appTime:event.target.value})\n        console.log(this.state.appTime);\n\n    }\n    \n    onChangeValue(event){\n        this.setState({appDocID:event.target.value});\n    }\n    render(){\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n\n        return(\n            <>\n                {window.response===undefined?<Redirect to='/'/>:null}\n                <form  method=\"post\" id=\"appointment_form\" onSubmit={this.handlePressedButton}>\n                    <div className=\"doctorsInAppointmentCreating\" onChange={this.onChangeValue.bind(this)}>\n                    {this.state.doctors.map(doctor=>{\n                        return(\n                            \n                        // <div className=\"doctorsInAppointmentCreating\">\n                        //     <input type=\"radio\" id={doctor.id}\n                        //     name={doctor.firstName + doctor.lastName} value={doctor.firstName + doctor.lastName}/>\n                        //     <label htmlFor={doctor.firstName + doctor.lastName}>{doctor.firstName + doctor.lastName}</label>\n                        // </div>\n                            <>\n                                \n                                    <input type=\"radio\" id={doctor.id}\n                                    name=\"doctors\" value={doctor.id} on={(e)=>this.doctorIdHandleChange} required/>\n                                    <label htmlFor={doctor.firstName + doctor.lastName}>{doctor.firstName + doctor.lastName}</label>\n                                \n                            </>\n                        \n                        \n                            \n                        )\n                    })}\n                    </div>\n                \n                    {/* <div className=\"dateInAppointmentCreating\" >\n                        \n                            <label htmlFor=\"1\">Data wizyty:</label>\n                            <input value={this.state.appDate} onChange={(e)=>this.setState({appDate:e.target.value})} type=\"date\" id=\"1234\" min={this.dateToString(today,2)} max={this.dateToString(today,16)} required/>\n                    </div> */}\n                    <select value={this.state.appDate} name=\"appointments\" id=\"appointments\" onChange={(e)=>this.setState({appTime:e.target.value})}>\n                    <label for=\"appointments\">Wybierz termin:</label>\n                    <optgroup label=\"appointment:\">\n                        {this.state.appointments.map(appointment=>{\n\n                            if (this.state.appDocID===appointment.doctor_id && appointment.patient_id===\"\")return(\n                                <>\n                                    \n                                        <option value={appointment.date}>{appointment.date}</option>\n                                       \n                                </>\n                            \n                            \n                                \n                            )\n                        })}\n                        </optgroup>\n                    </select>\n                  \n\n\n                    <p>{this.state.appTime}</p>\n                    <button type='submit'>Dodaj wizytę</button>\n                    \n                </form>\n                \n           </> \n        )\n    }\n}\n\nexport default AddAppointment;"]},"metadata":{},"sourceType":"module"}