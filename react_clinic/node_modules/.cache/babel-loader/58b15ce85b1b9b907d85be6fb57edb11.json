{"ast":null,"code":"var _jsxFileName = \"/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/RegistrationForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../Input';\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RegistrationForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const data = new FormData(this.form);\n      alert(data.get('firstName'));\n      axios.post('http://localhost:8080/api/registration/patient', {\n        'firstName': data.get('firstName'),\n        'lastName': data.get('lastName'),\n        'email': data.get('email'),\n        'password': data.get('password')\n      }).then(response => {\n        console.log(response);\n        alert(\"Pomyślnie zarejestrowano! Aby korzystać ze wszystkich usług potwierdź maila\");\n\n        /*#__PURE__*/\n        _jsxDEV(NavLink, {\n          to: \"/login\",\n          exact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this);\n      }).catch(error => {\n        alert(\"Nie udało się zarejestrować!\");\n        console.log(error);\n      });\n    };\n\n    this.handleError = (field, errmsg) => {\n      if (!field) return;\n\n      if (errmsg) {\n        this.setState(prevState => ({\n          failure: '',\n          errcount: prevState.errcount + 1,\n          errmsgs: { ...prevState.errmsgs,\n            [field]: errmsg\n          }\n        }));\n      } else {\n        this.setState(prevState => ({\n          failure: '',\n          errcount: prevState.errcount === 1 ? 0 : prevState.errcount - 1,\n          errmsgs: { ...prevState.errmsgs,\n            [field]: ''\n          }\n        }));\n      }\n    };\n\n    this.renderError = () => {\n      if (this.state.errcount || this.state.failure) {\n        const errmsg = this.state.failure || Object.values(this.state.errmsgs).find(v => v);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errmsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    if (props.error) {\n      this.state = {\n        failure: 'wrong username,email or password!',\n        errcount: 0\n      };\n    } else {\n      this.state = {\n        errcount: 0\n      };\n    }\n  }\n\n  render() {\n    const inputs = this.props.inputs.map(({\n      name,\n      placeholder,\n      type,\n      value,\n      className\n    }, index) => /*#__PURE__*/_jsxDEV(Input, {\n      name: name,\n      placeholder: placeholder,\n      type: type,\n      value: value,\n      className: type === 'submit' ? className : '',\n      handleError: this.handleError\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this));\n    const errors = this.renderError();\n    return /*#__PURE__*/_jsxDEV(\"form\", { ...this.props,\n      onSubmit: this.handleSubmit,\n      ref: fm => {\n        this.form = fm;\n      },\n      children: [inputs, errors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nRegistrationForm.propTypes = {\n  name: PropTypes.string,\n  action: PropTypes.string,\n  method: PropTypes.string,\n  inputs: PropTypes.array,\n  error: PropTypes.string\n};\nexport default RegistrationForm;","map":{"version":3,"sources":["/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/RegistrationForm.js"],"names":["React","Component","PropTypes","Input","axios","NavLink","RegistrationForm","constructor","props","handleSubmit","event","preventDefault","data","FormData","form","alert","get","post","then","response","console","log","catch","error","handleError","field","errmsg","setState","prevState","failure","errcount","errmsgs","renderError","state","Object","values","find","v","render","inputs","map","name","placeholder","type","value","className","index","errors","fm","propTypes","string","action","method","array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../Input';\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\nclass RegistrationForm extends Component {\n\n    constructor(props) {\n        super(props)\n        if(props.error) {\n            this.state = {\n              failure: 'wrong username,email or password!',\n              errcount: 0\n            }\n        } else {\n            this.state = { errcount: 0 }\n        }\n    }\n    handleSubmit = (event) =>{\n        event.preventDefault()\n        const data = new FormData(this.form)\n        alert(data.get('firstName'))\n        axios.post('http://localhost:8080/api/registration/patient', {'firstName':data.get('firstName'),\n        'lastName':data.get('lastName'),\n        'email':data.get('email'),\n        'password':data.get('password')})\n        .then(response =>{\n            console.log(response)\n            alert(\"Pomyślnie zarejestrowano! Aby korzystać ze wszystkich usług potwierdź maila\");\n            <NavLink to='/login' exact></NavLink>\n        })\n        .catch(error=>{\n            alert(\"Nie udało się zarejestrować!\")\n            console.log(error)\n        })\n    }\n\n\n\n    handleError = (field, errmsg) => {\n        if(!field) return\n\n        if(errmsg) {\n            this.setState((prevState) => ({\n                failure: '',\n                errcount: prevState.errcount + 1, \n                errmsgs: {...prevState.errmsgs, [field]: errmsg}\n            }))\n        } else {\n            this.setState((prevState) => ({\n                failure: '',\n                errcount: prevState.errcount===1? 0 : prevState.errcount-1,\n                errmsgs: {...prevState.errmsgs, [field]: ''}\n            }))\n        }\n    }\n\n    renderError = () => {\n        if(this.state.errcount || this.state.failure) {\n            const errmsg = this.state.failure \n              || Object.values(this.state.errmsgs).find(v=>v)\n            return <div className=\"error\">{errmsg}</div>\n        }\n    }\n\n    render() {\n        const inputs = this.props.inputs.map(\n          ({name, placeholder, type, value, className}, index) => (\n            <Input key={index} name={name} placeholder={placeholder} type={type} value={value}\n              className={type==='submit'? className : ''} handleError={this.handleError} />\n          )\n        )\n        const errors = this.renderError()\n        return (\n            <form {...this.props} onSubmit={this.handleSubmit} ref={fm => {this.form=fm}} >\n              {inputs}\n              {errors}\n            </form>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n  name: PropTypes.string,\n  action: PropTypes.string,\n  method: PropTypes.string,\n  inputs: PropTypes.array,\n  error: PropTypes.string\n}\n\nexport default RegistrationForm"]},"metadata":{},"sourceType":"module"}