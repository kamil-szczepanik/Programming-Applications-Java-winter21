{"ast":null,"code":"var _jsxFileName = \"/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment_Doctor.js\";\nimport React, { useState } from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\nimport axios from 'axios';\nimport PatientService from '../services/PatientService';\nimport CreatePatient from './CreatePatient';\nimport getInfoAboutLoggedDoctor from '../services/getInfoAboutLoggedDoctor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddAppointment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePressedButton = event => {\n      event.preventDefault();\n      var date = [];\n      const USERTOKEN = window.response.accessToken;\n      let config = {\n        headers: {\n          'Authorization': `Bearer ${USERTOKEN}`\n        }\n      };\n      axios.defaults.headers.common = {\n        'Authorization': `Bearer ${USERTOKEN}`\n      }; //DOKONCZYC\n\n      var year = parseInt(this.state.appDate.toString().slice(0, 4));\n      var month = parseInt(this.state.appDate.toString().slice(5, 7));\n      var day = parseInt(this.state.appDate.toString().slice(8, 10));\n      var hour = parseInt(this.state.appTime.toString().slice(0, 2));\n      var minute = parseInt(this.state.appTime.toString().slice(3, 5));\n      date.push(year, month, day, hour, minute);\n      axios.post('http://localhost:8080/api/appointment/registerNewAppointment', {\n        \"doctorId\": this.state.appDocID.toString(),\n        \"date\": [year, month, day, hour, minute]\n      }, config).then(response => {\n        console.log(response);\n        alert(\"Pomyślnie dodano wizytę!\");\n      }).catch(error => {\n        alert(\"Nie udało się dodać wizyty!\");\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      doctors: [],\n      appointments: [],\n      patients: [],\n      appDate: null,\n      appTime: null,\n      appDocID: null,\n      patient_pesel: null\n    };\n  }\n\n  componentDidMount() {\n    if (window.response !== undefined) {\n      DoctorService.getDoctors().then(response => {\n        this.setState({\n          doctors: response.data\n        });\n      });\n      AppointmentService.getAppointments().then(response => {\n        this.setState({\n          appointments: response.data\n        });\n      });\n      PatientService.getPatients().then(response => {\n        this.setState({\n          patients: response.data\n        });\n      });\n      getInfoAboutLoggedDoctor.getInfo().then(response => {\n        this.setState({\n          appDocID: response.data.id\n        });\n      });\n    }\n  }\n\n  dateToString(given_date, delay = 0) {\n    var date = new Date();\n    date.setDate(given_date.getDate() + delay);\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var yyyy = date.getFullYear();\n    return yyyy + '-' + mm + '-' + dd;\n  }\n\n  createPatient() {}\n\n  createPatientIfNeeded() {\n    var isPatientCreated = false;\n    this.patients.map(patient => {\n      if (patient.pesel === this.state.patient_pesel) {\n        isPatientCreated = true;\n      }\n    });\n\n    if (isPatientCreated !== true) {\n      this.createPatient();\n    }\n  }\n\n  dateHandleChange(event) {\n    event.preventDefault();\n    this.setState({\n      appDate: event.target.value\n    });\n  }\n\n  timeHandleChange(event) {\n    event.preventDefault();\n    this.setState({\n      appTime: event.target.value\n    });\n  }\n\n  onChangeValue(event) {\n    this.setState({\n      appDocID: event.target.value\n    });\n  }\n\n  render() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\n    var yyyy = today.getFullYear();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"post\",\n        id: \"appointment_create_doc\",\n        onSubmit: this.handlePressedButton,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"start\",\n          children: \"Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.appDate,\n          onChange: e => this.setState({\n            appDate: e.target.value\n          }),\n          type: \"date\",\n          id: \"app_date\",\n          name: \"app_date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"appt\",\n          children: \"Godzina:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.appTime,\n          onChange: e => this.setState({\n            appTime: e.target.value\n          }),\n          type: \"time\",\n          id: \"appt\",\n          name: \"appt\",\n          min: \"09:00\",\n          max: \"18:00\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Dodaj wizyt\\u0119\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default AddAppointment;","map":{"version":3,"sources":["/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment_Doctor.js"],"names":["React","useState","props","DoctorService","AppointmentService","axios","PatientService","CreatePatient","getInfoAboutLoggedDoctor","AddAppointment","Component","constructor","handlePressedButton","event","preventDefault","date","USERTOKEN","window","response","accessToken","config","headers","defaults","common","year","parseInt","state","appDate","toString","slice","month","day","hour","appTime","minute","push","post","appDocID","then","console","log","alert","catch","error","doctors","appointments","patients","patient_pesel","componentDidMount","undefined","getDoctors","setState","data","getAppointments","getPatients","getInfo","id","dateToString","given_date","delay","Date","setDate","getDate","dd","String","padStart","mm","getMonth","yyyy","getFullYear","createPatient","createPatientIfNeeded","isPatientCreated","map","patient","pesel","dateHandleChange","target","value","timeHandleChange","onChangeValue","render","today","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\nimport axios from 'axios';\nimport PatientService from '../services/PatientService';\nimport CreatePatient from './CreatePatient';\nimport getInfoAboutLoggedDoctor from '../services/getInfoAboutLoggedDoctor';\n\n\nclass AddAppointment extends React.Component{\n    \n    \n\n    constructor(props){\n        super(props)\n        this.state = {\n            doctors:[],\n            appointments:[],\n            patients:[],\n            appDate:null,\n            appTime:null,\n            appDocID:null,\n            patient_pesel:null,\n\n            \n        }\n    }\n    \n\n    componentDidMount(){\n        if(window.response!==undefined){\n        DoctorService.getDoctors().then((response)=>{\n            this.setState({doctors: response.data})\n        });\n        AppointmentService.getAppointments().then((response)=>{\n            this.setState({appointments: response.data})\n        });\n        PatientService.getPatients().then((response)=>{\n            this.setState({patients: response.data})\n        });\n        getInfoAboutLoggedDoctor.getInfo().then((response)=>{\n            this.setState({appDocID: response.data.id})\n        })\n    }\n    }\n    dateToString(given_date, delay=0){\n        var date = new Date();\n        date.setDate(given_date.getDate()+delay);\n        var dd = String(date.getDate()).padStart(2, '0');\n        var mm = String(date.getMonth() + 1).padStart(2, '0');\n        var yyyy = date.getFullYear();\n\n        return yyyy + '-' + mm + '-' + dd;\n\n    }\n    createPatient(){\n        \n    }\n    createPatientIfNeeded(){\n        var isPatientCreated = false\n        this.patients.map(patient=>{\n            if (patient.pesel===this.state.patient_pesel){\n                isPatientCreated=true;\n            }\n        })\n\n        if (isPatientCreated!==true){\n            this.createPatient()\n        } \n\n    }\n    handlePressedButton = (event) =>{\n        event.preventDefault()\n        var date = []\n        const USERTOKEN=window.response.accessToken;\n        let config = {\n            headers:{\n                'Authorization': `Bearer ${USERTOKEN}`}\n            };\n        axios.defaults.headers.common = {'Authorization': `Bearer ${USERTOKEN}`}\n        //DOKONCZYC\n        var year = parseInt(this.state.appDate.toString().slice(0,4));\n        var month = parseInt(this.state.appDate.toString().slice(5,7));\n        var day = parseInt(this.state.appDate.toString().slice(8,10));\n        var hour = parseInt(this.state.appTime.toString().slice(0,2));\n        var minute = parseInt(this.state.appTime.toString().slice(3,5));\n\n        date.push(year,month,day,hour,minute);\n        axios.post('http://localhost:8080/api/appointment/registerNewAppointment', {\n    \"doctorId\": this.state.appDocID.toString(),\n    \"date\": [year, month, day, hour, minute]\n    }, config)\n        .then(response =>{\n            console.log(response)\n            alert(\"Pomyślnie dodano wizytę!\")\n        })\n        .catch(error=>{\n            alert(\"Nie udało się dodać wizyty!\")\n            console.log(error)\n        })\n    }\n\n    dateHandleChange(event){\n        event.preventDefault();\n\n        this.setState({appDate:event.target.value})\n\n    }\n   timeHandleChange(event){\n        event.preventDefault();\n        this.setState({appTime:event.target.value})\n\n    }\n    \n    onChangeValue(event){\n        this.setState({appDocID:event.target.value});\n    }\n    render(){\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n\n        return(\n            <>  \n                <form  method=\"post\" id=\"appointment_create_doc\" onSubmit={this.handlePressedButton}>\n                <label for=\"start\">Data:</label>\n                <input value={this.state.appDate} onChange={e=>this.setState({appDate:e.target.value})} type=\"date\" id=\"app_date\" name=\"app_date\" />\n\n                <label for=\"appt\">Godzina:</label>\n                <input value={this.state.appTime}  onChange={e=>this.setState({appTime:e.target.value})} type=\"time\" id=\"appt\" name=\"appt\"\n                    min=\"09:00\" max=\"18:00\" required/>\n                    <button type='submit'>Dodaj wizytę</button>\n                    \n                </form>\n           </> \n        )\n    }\n}\n\nexport default AddAppointment;"]},"metadata":{},"sourceType":"module"}