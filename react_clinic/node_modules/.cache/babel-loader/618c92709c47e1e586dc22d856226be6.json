{"ast":null,"code":"var _jsxFileName = \"/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment.js\";\nimport React from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass AddAppointment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePressedButton = (event, data) => {\n      const appointment = {\n        doctor,\n        time,\n        pacient\n      };\n      fetch('http://localhost:8080/api/appointment', {\n        method: 'POST',\n        // headers:{\"\"}\n        body: JSON.stringify(data)\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      });\n    };\n\n    this.state = {\n      doctors: [],\n      appointments: []\n    };\n  }\n\n  componentDidMount() {\n    DoctorService.getDoctors().then(response => {\n      this.setState({\n        doctors: response.data\n      });\n    });\n    AppointmentService.getAppointments().then(response => {\n      this.setState({\n        appointments: response.data\n      });\n    });\n  }\n\n  dateToString(given_date, delay = 0) {\n    var date = new Date();\n    date.setDate(given_date.getDate() + delay);\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var yyyy = date.getFullYear();\n    return yyyy + '-' + mm + '-' + dd;\n  }\n\n  render() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\n    var yyyy = today.getFullYear();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handlePressedButton(data),\n        method: \"post\",\n        id: \"appointment_form\",\n        children: [this.state.doctors.map(doctor => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: doctor.id,\n              name: \"doctors\",\n              value: doctor.firstName + doctor.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: doctor.firstName + doctor.lastName,\n              children: doctor.firstName + doctor.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dateInAppointmentCreating\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"1\",\n            children: \"Data wizyty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"1234\",\n            name: \"1234\",\n            min: this.dateToString(today, 2),\n            max: this.dateToString(today, 16),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            id: \"12345\",\n            name: \"12345\",\n            min: \"10\",\n            max: \"19\",\n            step: \"1200\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Dodaj wizyt\\u0119\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default AddAppointment;","map":{"version":3,"sources":["/home/michal/code/pap21l-z07/Clinic/src/main/frontend/my-app/src/components/AddAppointment.js"],"names":["React","props","DoctorService","AppointmentService","AddAppointment","Component","constructor","handlePressedButton","event","data","appointment","doctor","time","pacient","fetch","method","body","JSON","stringify","then","response","console","log","json","state","doctors","appointments","componentDidMount","getDoctors","setState","getAppointments","dateToString","given_date","delay","date","Date","setDate","getDate","dd","String","padStart","mm","getMonth","yyyy","getFullYear","render","today","map","id","firstName","lastName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport props from 'prop-types';\nimport DoctorService from '../services/DoctorService';\nimport AppointmentService from '../services/AppointmentService';\n\nclass AddAppointment extends React.Component{\n    \n    \n\n    constructor(props){\n        super(props)\n        this.state = {\n            doctors:[],\n            appointments:[],\n            \n        }\n    }\n    \n\n    componentDidMount(){\n        DoctorService.getDoctors().then((response)=>{\n            this.setState({doctors: response.data})\n        });\n        AppointmentService.getAppointments().then((response)=>{\n            this.setState({appointments: response.data})\n        });\n    }\n    dateToString(given_date, delay=0){\n        var date = new Date();\n        date.setDate(given_date.getDate()+delay);\n        var dd = String(date.getDate()).padStart(2, '0');\n        var mm = String(date.getMonth() + 1).padStart(2, '0');\n        var yyyy = date.getFullYear();\n\n        return yyyy + '-' + mm + '-' + dd;\n\n    }\n    handlePressedButton = (event, data) =>{\n        const appointment = {doctor, time, pacient};\n\n\n\n        fetch('http://localhost:8080/api/appointment', {\n        method: 'POST',\n        // headers:{\"\"}\n        body: JSON.stringify(data)\n      }).then(function(response) {\n        console.log(response)\n        return response.json();\n      });\n    }\n\n    render(){\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n\n        return(\n            <>\n                <form onSubmit={this.handlePressedButton(data)} method=\"post\" id=\"appointment_form\">\n                        \n                    {this.state.doctors.map(doctor=>{\n                        return(\n                            \n                                <>\n                                    <input type=\"radio\" id={doctor.id}\n                                    name=\"doctors\" value={doctor.firstName + doctor.lastName}/>\n                                    <label htmlFor={doctor.firstName + doctor.lastName}>{doctor.firstName + doctor.lastName}</label>\n                                </>\n                        \n                        \n                            \n                        )\n                    })}\n                \n                    <div className=\"dateInAppointmentCreating\">\n                        \n                            <label htmlFor=\"1\">Data wizyty:</label>\n                            <input type=\"date\" id=\"1234\" name=\"1234\" min={this.dateToString(today,2)} max={this.dateToString(today,16)} required/>\n                            <input type=\"time\" id=\"12345\"name=\"12345\" min='10' max='19'  step=\"1200\"required/>\n\n                        \n                    </div>\n                    <button>Dodaj wizytę</button>\n                    \n                </form>\n           </> \n        )\n    }\n}\n\nexport default AddAppointment;"]},"metadata":{},"sourceType":"module"}